/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iterface.algorithm;

import algorithm.MyAlgorithm4;
import common.SensorUtility;
import static common.SensorUtility.mListSensorNodes;
import iterface.frameMain;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import model.NodeItem;

/**
 *
 * @author dauto98
 */
public class frameMyAlgorithm4 extends javax.swing.JFrame {
    private int sensorsThreshold;
    private DefaultListModel sensorSetsListModel;
    private JList SensorSetsList;
    private ArrayList<ArrayList<NodeItem>> listOfSensorSets;
    private ArrayList<Double> onTimeList;

    /**
     * Creates new form frameMyAlgorithm4
     */
    public frameMyAlgorithm4() {
        initComponents();
        sensorsThreshold = defaultSensorsThreshold()/2;
        ResultPanel.setMaximumSize(new Dimension(492, 211));
        ResultPanel.setMinimumSize(new Dimension(492, 211));
        ResultPanel.setPreferredSize(new Dimension(492, 211));
        NumberOfSensorLabel.setText("Number of Sensor : "+mListSensorNodes.size());
        sensorsThresholdTextField.setText(String.valueOf(defaultSensorsThreshold()/2));
    }
    
    private int defaultSensorsThreshold() {
        float rectangleArea = SensorUtility.numberOfColumn*SensorUtility.numberOfRow;
        float sensorArea = SensorUtility.mRsValue*SensorUtility.mRsValue*(float)Math.PI;
        return (int)Math.ceil(rectangleArea/sensorArea);
    }
    
    void clearData(){
        resultHeader.setText("Result");
        LifeTimeResult.setText(String.valueOf(0));
        RunTimeResult.setText(String.valueOf(0));
        if (sensorSetsListModel != null) {
            sensorSetsListModel.clear();
        }
        SensorUtility.mListSensorNodes.forEach(node -> node.setStatus(0));
        frameMain.coordinatePanel.refresh();
    }
    
    public ListSelectionListener sensorSetsSelectionListener = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!sensorSetsListModel.isEmpty()) {
                int selectionIndex = SensorSetsList.getSelectedIndex();
                if (selectionIndex >= 0 && selectionIndex < sensorSetsListModel.size()) {
                    ArrayList<NodeItem> selectedSet = listOfSensorSets.get(selectionIndex);
                    SensorUtility.mListSensorNodes.forEach(node -> node.setStatus(0));
                    frameMain.coordinatePanel.refresh();
                    selectedSet.forEach(node -> {
                       SensorUtility.mListSensorNodes.get(SensorUtility.mListSensorNodes.indexOf(node)).setStatus(1);
                    });
                    frameMain.coordinatePanel.refresh();
                }
            }
        }
    };
    
    private void displayResult(Map<String, Object> result, long timeRun) {
        if (result == null) {
            resultHeader.setText("Result: No sensors set can cover the the area");
        } else {
            onTimeList = (ArrayList<Double>)result.get("onTime");
            listOfSensorSets = (ArrayList<ArrayList<NodeItem>>)result.get("sensorSets");
            
            LifeTimeResult.setText(String.valueOf(onTimeList.stream().reduce(0d, (x, y) -> x+y)));
            RunTimeResult.setText(String.format("%.2f", ((float)timeRun/1000)));
            
            // create display list in the panel
            sensorSetsListModel = new DefaultListModel();
            for (int i = 0, length = listOfSensorSets.size(); i < length; i++) {
                sensorSetsListModel.addElement("Set " + (i+1) + ", runtime: " + onTimeList.get(i));
            }
            
            SensorSetsList = new JList(sensorSetsListModel);
            
            SensorSetsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            ListSensorPane.setViewportView(SensorSetsList);
            SensorSetsList.addListSelectionListener(sensorSetsSelectionListener);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NumberOfSensorLabel = new javax.swing.JLabel();
        LifeTimeSensorText = new javax.swing.JLabel();
        LifeTimeOfSensorTextField = new javax.swing.JTextField();
        runButton = new javax.swing.JButton();
        ResultPanel = new javax.swing.JPanel();
        resultHeader = new javax.swing.JLabel();
        LifeTimeLabel = new javax.swing.JLabel();
        LifeTimeResult = new javax.swing.JLabel();
        RunTimeLabel = new javax.swing.JLabel();
        RunTimeResult = new javax.swing.JLabel();
        ListSensorPane = new javax.swing.JScrollPane();
        sensorsThresholdLabel = new javax.swing.JLabel();
        sensorsThresholdTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        NumberOfSensorLabel.setText("Number of sensors: ");

        LifeTimeSensorText.setText("Life time of the sensor(s)");

        LifeTimeOfSensorTextField.setText("3000");
        LifeTimeOfSensorTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                LifeTimeOfSensorTextFieldKeyReleased(evt);
            }
        });

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        ResultPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        resultHeader.setText("Result");

        LifeTimeLabel.setText("Life time(s): ");

        LifeTimeResult.setText("0");

        RunTimeLabel.setText("Run time(s): ");

        RunTimeResult.setText("0");

        javax.swing.GroupLayout ResultPanelLayout = new javax.swing.GroupLayout(ResultPanel);
        ResultPanel.setLayout(ResultPanelLayout);
        ResultPanelLayout.setHorizontalGroup(
            ResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResultPanelLayout.createSequentialGroup()
                .addComponent(resultHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(ResultPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(LifeTimeLabel)
                .addGap(18, 18, 18)
                .addComponent(LifeTimeResult)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RunTimeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RunTimeResult)
                .addGap(94, 94, 94))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ResultPanelLayout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(ListSensorPane, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        ResultPanelLayout.setVerticalGroup(
            ResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResultPanelLayout.createSequentialGroup()
                .addComponent(resultHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LifeTimeResult)
                        .addComponent(RunTimeLabel)
                        .addComponent(RunTimeResult))
                    .addComponent(LifeTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ListSensorPane, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
        );

        sensorsThresholdLabel.setText("Number of sensors threshold");

        sensorsThresholdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sensorsThresholdTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(NumberOfSensorLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LifeTimeSensorText)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(LifeTimeOfSensorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sensorsThresholdLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sensorsThresholdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(ResultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NumberOfSensorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sensorsThresholdLabel)
                    .addComponent(sensorsThresholdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LifeTimeSensorText)
                    .addComponent(LifeTimeOfSensorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(runButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ResultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        if (mListSensorNodes.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Insert sensorr nodes");
        } else {
            clearData();
            MyAlgorithm4 myAlgorithm = new MyAlgorithm4();
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    runButton.setText("Running");
                    runButton.setEnabled(false);
                    long begin = System.currentTimeMillis();
                    Map<String, Object> result = myAlgorithm.run(sensorsThreshold);
                    long end = System.currentTimeMillis();
                    long timeRun = end-begin;
                    displayResult(result, timeRun);
                    runButton.setText("Run");
                    runButton.setEnabled(true);
                }
            });
            thread.start();
        }
    }//GEN-LAST:event_runButtonActionPerformed

    private void LifeTimeOfSensorTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LifeTimeOfSensorTextFieldKeyReleased
        try {
            SensorUtility.LifeTimeOfSensor = Integer.parseInt(LifeTimeOfSensorTextField.getText());
        } catch (NumberFormatException nfe) {
            LifeTimeOfSensorTextField.setText("");
        }
    }//GEN-LAST:event_LifeTimeOfSensorTextFieldKeyReleased

    private void sensorsThresholdTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sensorsThresholdTextFieldKeyReleased
        try {
            sensorsThreshold = Integer.parseInt(sensorsThresholdTextField.getText());
        } catch (NumberFormatException nfe) {
            LifeTimeOfSensorTextField.setText(String.valueOf(defaultSensorsThreshold()));
        }
    }//GEN-LAST:event_sensorsThresholdTextFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frameMyAlgorithm4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frameMyAlgorithm4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frameMyAlgorithm4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameMyAlgorithm4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frameMyAlgorithm4().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LifeTimeLabel;
    private javax.swing.JTextField LifeTimeOfSensorTextField;
    private javax.swing.JLabel LifeTimeResult;
    private javax.swing.JLabel LifeTimeSensorText;
    private javax.swing.JScrollPane ListSensorPane;
    private javax.swing.JLabel NumberOfSensorLabel;
    private javax.swing.JPanel ResultPanel;
    private javax.swing.JLabel RunTimeLabel;
    private javax.swing.JLabel RunTimeResult;
    private javax.swing.JLabel resultHeader;
    private javax.swing.JButton runButton;
    private javax.swing.JLabel sensorsThresholdLabel;
    private javax.swing.JTextField sensorsThresholdTextField;
    // End of variables declaration//GEN-END:variables
}
